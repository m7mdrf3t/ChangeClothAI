{"ast":null,"code":"export async function callChangeClothesApi(request, apiKey) {\n  const formData = new FormData();\n\n  // Add model image\n  if (typeof request.modelImg === 'string') {\n    // If it's a URL or base64, we need to convert it to a file\n    if (request.modelImg.startsWith('http')) {\n      // It's a URL, fetch and convert to file\n      try {\n        const response = await fetch(request.modelImg);\n        const blob = await response.blob();\n        const file = new File([blob], 'model.jpg', {\n          type: blob.type\n        });\n        formData.append('modelImg', file);\n      } catch (error) {\n        throw new Error('Failed to fetch model image from URL');\n      }\n    } else {\n      // It's base64, convert to file\n      try {\n        const response = await fetch(request.modelImg);\n        const blob = await response.blob();\n        const file = new File([blob], 'model.jpg', {\n          type: blob.type\n        });\n        formData.append('modelImg', file);\n      } catch (error) {\n        throw new Error('Failed to convert base64 model image to file');\n      }\n    }\n  } else {\n    // It's already a File\n    formData.append('modelImg', request.modelImg);\n  }\n\n  // Add garment image\n  if (typeof request.garmentImg === 'string') {\n    // If it's a URL or base64, we need to convert it to a file\n    if (request.garmentImg.startsWith('http')) {\n      // It's a URL, fetch and convert to file\n      try {\n        const response = await fetch(request.garmentImg);\n        const blob = await response.blob();\n        const file = new File([blob], 'garment.jpg', {\n          type: blob.type\n        });\n        formData.append('garmentImg', file);\n      } catch (error) {\n        throw new Error('Failed to fetch garment image from URL');\n      }\n    } else {\n      // It's base64, convert to file\n      try {\n        const response = await fetch(request.garmentImg);\n        const blob = await response.blob();\n        const file = new File([blob], 'garment.jpg', {\n          type: blob.type\n        });\n        formData.append('garmentImg', file);\n      } catch (error) {\n        throw new Error('Failed to convert base64 garment image to file');\n      }\n    }\n  } else {\n    // It's already a File\n    formData.append('garmentImg', request.garmentImg);\n  }\n\n  // Add category\n  formData.append('category', request.category);\n\n  // Add garment description if provided\n  if (request.garmentDesc && request.garmentDesc.trim() !== '') {\n    formData.append('garmentDesc', request.garmentDesc);\n  }\n  const apiEndpoint = 'https://changeclothesai.online/api/openapi/change-clothes-ai';\n  try {\n    const response = await fetch(apiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBpZCI6ImFwcF9kNmE1ODNlMyIsImlhdCI6MTc1NTU5Mjk1NX0.Do6F2y_Jvgn1j_3OzI6jc1Zlzxp6Cin_3oNrob88wCA`,\n        'Accept': 'application/json',\n        'Origin': window.location.origin\n      },\n      mode: 'cors',\n      credentials: 'omit',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`HTTP error ${response.status}: ${errorData.msg || 'Unknown error'}`);\n    }\n    const data = await response.json();\n    return {\n      resultImgUrl: data.data.resultImgUrl,\n      maskImgUrl: data.data.maskImgUrl,\n      error: null\n    };\n  } catch (error) {\n    console.error('Error changing clothes:', error);\n\n    // Handle CORS errors specifically\n    if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\n      return {\n        resultImgUrl: null,\n        maskImgUrl: null,\n        error: 'CORS Error: Unable to connect to the API. This might be due to browser security restrictions. Please try using a CORS-enabled browser extension or contact the API provider.'\n      };\n    }\n    return {\n      resultImgUrl: null,\n      maskImgUrl: null,\n      error: error instanceof Error ? error.message : 'Unknown error occurred'\n    };\n  }\n}","map":{"version":3,"names":["callChangeClothesApi","request","apiKey","formData","FormData","modelImg","startsWith","response","fetch","blob","file","File","type","append","error","Error","garmentImg","category","garmentDesc","trim","apiEndpoint","method","headers","window","location","origin","mode","credentials","body","ok","errorData","json","status","msg","data","resultImgUrl","maskImgUrl","console","TypeError","message","includes"],"sources":["/Users/mohamedhafez.isobar.com/Desktop/CS/Apps/ChangeClothAI/src/api/changeClothesApi.ts"],"sourcesContent":["import { ChangeClothesRequest, ChangeClothesResponse } from '../types';\n\nexport async function callChangeClothesApi(\n  request: ChangeClothesRequest,\n  apiKey: string\n): Promise<ChangeClothesResponse> {\n  const formData = new FormData();\n  \n  // Add model image\n  if (typeof request.modelImg === 'string') {\n    // If it's a URL or base64, we need to convert it to a file\n    if (request.modelImg.startsWith('http')) {\n      // It's a URL, fetch and convert to file\n      try {\n        const response = await fetch(request.modelImg);\n        const blob = await response.blob();\n        const file = new File([blob], 'model.jpg', { type: blob.type });\n        formData.append('modelImg', file);\n      } catch (error) {\n        throw new Error('Failed to fetch model image from URL');\n      }\n    } else {\n      // It's base64, convert to file\n      try {\n        const response = await fetch(request.modelImg);\n        const blob = await response.blob();\n        const file = new File([blob], 'model.jpg', { type: blob.type });\n        formData.append('modelImg', file);\n      } catch (error) {\n        throw new Error('Failed to convert base64 model image to file');\n      }\n    }\n  } else {\n    // It's already a File\n    formData.append('modelImg', request.modelImg);\n  }\n\n  // Add garment image\n  if (typeof request.garmentImg === 'string') {\n    // If it's a URL or base64, we need to convert it to a file\n    if (request.garmentImg.startsWith('http')) {\n      // It's a URL, fetch and convert to file\n      try {\n        const response = await fetch(request.garmentImg);\n        const blob = await response.blob();\n        const file = new File([blob], 'garment.jpg', { type: blob.type });\n        formData.append('garmentImg', file);\n      } catch (error) {\n        throw new Error('Failed to fetch garment image from URL');\n      }\n    } else {\n      // It's base64, convert to file\n      try {\n        const response = await fetch(request.garmentImg);\n        const blob = await response.blob();\n        const file = new File([blob], 'garment.jpg', { type: blob.type });\n        formData.append('garmentImg', file);\n      } catch (error) {\n        throw new Error('Failed to convert base64 garment image to file');\n      }\n    }\n  } else {\n    // It's already a File\n    formData.append('garmentImg', request.garmentImg);\n  }\n\n  // Add category\n  formData.append('category', request.category);\n\n  // Add garment description if provided\n  if (request.garmentDesc && request.garmentDesc.trim() !== '') {\n    formData.append('garmentDesc', request.garmentDesc);\n  }\n\n  const apiEndpoint = 'https://changeclothesai.online/api/openapi/change-clothes-ai';\n  \n  try {\n    const response = await fetch(apiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBpZCI6ImFwcF9kNmE1ODNlMyIsImlhdCI6MTc1NTU5Mjk1NX0.Do6F2y_Jvgn1j_3OzI6jc1Zlzxp6Cin_3oNrob88wCA`,\n        'Accept': 'application/json',\n        'Origin': window.location.origin,\n      },\n      mode: 'cors',\n      credentials: 'omit',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`HTTP error ${response.status}: ${errorData.msg || 'Unknown error'}`);\n    }\n\n    const data = await response.json();\n    return { \n      resultImgUrl: data.data.resultImgUrl, \n      maskImgUrl: data.data.maskImgUrl, \n      error: null \n    };\n\n  } catch (error) {\n    console.error('Error changing clothes:', error);\n    \n    // Handle CORS errors specifically\n    if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\n      return {\n        resultImgUrl: null,\n        maskImgUrl: null,\n        error: 'CORS Error: Unable to connect to the API. This might be due to browser security restrictions. Please try using a CORS-enabled browser extension or contact the API provider.'\n      };\n    }\n    \n    return { \n      resultImgUrl: null, \n      maskImgUrl: null, \n      error: error instanceof Error ? error.message : 'Unknown error occurred' \n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}